<!DOCTYPE html>
<html>

<head>
	<title>My App</title>

	<!--App information-->
	<meta name="Name" content="App: Custom Cycle Time Table" />
	<meta name="Version" content="1.0" />
	<meta name="Vendor" content="" />

	<!--Include SDK-->
	<script type="text/javascript" src="/apps/2.0rc2/sdk.js"></script>
	<script type="text/javascript">
//
// This app creates a Rally Grid containing the defects and stories in the selected Iteration
// then sums up the total days each item was in the defined states. The state can be any
// valid pull-down field. KanbanState is a good example. The default is Rally's internal
// ScheduleState.
// 
// *** CUSTOMIZE "timeInField" below to your specific field. You need to used the 
//        "Display Name" value with spaces removed. Note: if it is a custom field
//        then prefix it with "c_" (i.e. Field Name "Kanban State" -> "c_KanbanState")
//        You must also update the "timeInFieldStates" array to match the pull-down values
//        of the timeInField field.
//
		var app = this;
		var appf;
		var timeInField = "State";
		var iid;
		var fromDate;
		var stateField;
		var timeInFieldStates = [
			"Open",
			"Verifying",
			"Fixed"
		];

		Rally.onReady(function () {
			Ext.define("DefectAge", {
                extend: 'Rally.app.App',
//				extend: 'Rally.app.TimeboxScopedApp',
				componentCls: 'app',
//				scopeType: 'iteration',
//				comboboxConfig: {
//					fieldLabel: 'Select an Iteration:',
//					labelWidth: 100,
//					width: 300
//				},
//	onScopeChange: function() {
//		if (this.getContext().getTimeboxScope().getRecord() === null) {
//			alert("You must specify a valid Iteration/Sprint. Unscheduled is not supported.");
//		} else {
//			this._launch();
//		}
//	},
				launch: function() {
					this._launch();
				},
				addContent: function() {

					appf._launch();;
				},
				_launch: function () {
					var self = this;
					Ext.getBody().mask('Working...');
					Ext.create("Rally.data.lookback.SnapshotStore", {
						fetch: ["FormattedID", "_TypeHierarchy", "Name", "PlanEstimate", timeInField, "ScheduleState", "Priority","Severity","Environment"],
						hydrate: [timeInField],
						filters: [
						{
							property: "_ProjectHierarchy",
							value: {
								"$in": [this.getContext().getProject().ObjectID]
							}
						}, {
							property: "_TypeHierarchy",
							value: {
								"$in": ["Defect"]
							}
						} //, 
//						{
//							property: "Iteration",
//							value: {
//								"$in": [this.getContext().getTimeboxScope().getRecord().get("ObjectID")]
//							}
//						}
//						,
//						{
//							property: "_ValidFrom",
//							value: {
//								"$in": [this.getContext().getTimeboxScope().getRecord().get("StartDate")]
//							}
//						}
						],
//						,
//						{
//							property: "_ValidTo",
//							value: { $gt: app.fromDate }
//							}
//						], // sort: { "_ValidFrom": -1 }
						sorters: [{
							property: "_ValidTo",
							direction: "ASC"
						}]
					}).load({
						params: {
							compress: false,
							removeUnauthorizedSnapshots: true
						},
						callback: function (records, operation, success) {
							var aggregateCycleTimes = [];

							var allObjectIDs = {};
							Ext.Array.each(records, function (record) {
								allObjectIDs[record.get("ObjectID")] = record.get("ObjectID");
							});

							for (var storyIndex = 0; storyIndex < Object.keys(allObjectIDs).length; storyIndex++) {
								(function () {
									var currentObjectID = parseInt(Object.keys(allObjectIDs)[storyIndex], 10);
									var recordsByStory = Ext.Array.filter(records, function (record) {
										return record.get("ObjectID") === currentObjectID;
									});

									var currentStateOfStory = "";
//									var currentStateOfStorySnapshot = Ext.Array.filter(recordsByStory, function (record) {
//										return record.get("_ValidTo").indexOf("9999") !== -1;
//									})[0];
//console.log(recordsByStory.length);
									var currentStateOfStorySnapshot = Ext.Array.push(recordsByStory[recordsByStory.length - 1]);
//console.log(currentStateOfStorySnapshot);
									if (currentStateOfStorySnapshot) {
										currentStateOfStory = currentStateOfStorySnapshot[0].get(timeInField);
										console.log("GOOD state - ", recordsByStory);
									} else {
											console.log("not good state - ", recordsByStory);
									}
									var formattedID = recordsByStory[0].get("FormattedID");
									var cycleTimes = {
										id: formattedID,
										name: recordsByStory[0].get("Name"),
//										sprint: recordsByStory[0].get("Iteration"),
//										planEstimate: shirtSizeLUT[Rally.util.Array.last(recordsByStory).get("PlanEstimate")],
//										planEstimate: Rally.util.Array.last(recordsByStory).get("PlanEstimate"),
planEstimate: 0,
										currentStateOfStory: currentStateOfStory
									};

									var allStatusesAreNull = true;

									for (var i = 0; i < timeInFieldStates.length; i++) {
										var currentStatus = timeInFieldStates[i];

										var currentSnapshot = Ext.Array.filter(recordsByStory, function (record) {
											return record.get(timeInField) === currentStatus;
										})[0];

										if (!currentSnapshot) {
											cycleTimes[currentStatus] = null;
											continue;
										}

										var firstDate = new Date(currentSnapshot.get("_ValidFrom"));
										var nextSnapshot = Rally.util.Array.last(Ext.Array.filter(recordsByStory, function (record) {
											return record.get(timeInField) === currentStatus;
										}));
// Added to get newest Name for Display
if (nextSnapshot) {
cycleTimes.name = nextSnapshot.get("Name");
}
										var secondDate = new Date();

										if (nextSnapshot && (new Date(nextSnapshot.get("_ValidTo"))).getFullYear() !== 9998) {
											secondDate = new Date(nextSnapshot.get("_ValidTo"));
										} else {
//											secondDate = new Date(self.getContext().getTimeboxScope().getRecord().get("EndDate"));
var newDate = new Date()
var month = newDate.getMonth() + 1
var day = newDate.getDate()
var year = newDate.getFullYear()
											secondDate = new Date(year,month,day-1);
										}
// console.log(secondDate, firstDate);
										var cycleTime = Rally.util.DateTime.getDifference(secondDate, firstDate, "day");
										cycleTimes[currentStatus] = cycleTime;

										if (cycleTime !== null)
											allStatusesAreNull = false;
									}

									if (!allStatusesAreNull)
										aggregateCycleTimes.push(cycleTimes);
								})();
							}

							var myStore = Ext.create("Rally.data.custom.Store", {
								data: aggregateCycleTimes,
								pageSize: 100
							});
							Ext.getBody().unmask();
							var columnConfig = [{
								text: "ID",
								dataIndex: "id"
							}, {
								text: "Name",
								dataIndex: "name",
								width: "280px"
							}, {
								text: "Priority",
								dataIndex: "Priority"
							}, {
								text: "Severity",
								dataIndex: "Severity"
							}, {
								text: "Environment",
								dataIndex: "Environment"
							}, {
								text: "Current State",
								dataIndex: "currentStateOfStory"
							}];

							for (var i = 0; i < timeInFieldStates.length; i++) {
								var columnConfigElement = {};
								columnConfigElement["text"] = timeInFieldStates[i];
								columnConfigElement["dataIndex"] = timeInFieldStates[i];
								columnConfig.push(columnConfigElement);
							}
							if (self.grid) {
								self.grid.destroy();
							}
							self.grid = self.add({
								xtype: "rallygrid",
								itemId: "mygrid",
								id: "mygrid",
								enableEditing: false,
								// simpleSelect: true,
								// styleHtmlContent: true,
								store: myStore,
								columnCfgs: columnConfig
							});
						}
					});
				},
			});

			Rally.launchApp("DefectAge", {
				name: "My Custom App"
			});
		});
	</script>
</head>

<body>
</body>

</html>